/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador;
public class Gramatica implements GramaticaConstants {

/** Fin Lexico */

/**Inicio sintactico*/
  final public void Inicio() throws ParseException {
    Import();
    Clases();
    jj_consume_token(0);
  }

  final public void Vacio() throws ParseException {

  }

  final public void Import() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      jj_consume_token(IMPORT);
      Import1();
      break;
    default:
      jj_la1[0] = jj_gen;
      Vacio();
    }
  }

  final public void Import1() throws ParseException {
    jj_consume_token(LIBR);
    jj_consume_token(PYC);
    Import2();
  }

  final public void Import2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      jj_consume_token(IMPORT);
      Import1();
      break;
    default:
      jj_la1[1] = jj_gen;
      Vacio();
    }
  }

  final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TipoEncapsular() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Clases() throws ParseException {
    TipoEncapsular();
    jj_consume_token(CLASS);
    jj_consume_token(CLASES);
    ClasesA();
  }

  final public void ClasesA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLAVA:
      jj_consume_token(LLAVA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
        TipoEncapsular();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASES:
          Constructor();
          break;
        case CHAR:
        case STRING:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case VOID:
        case DOUBLE:
          Cuerpo();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        Vacio();
      }
      jj_consume_token(LLAVC);
      break;
    case DERIVATE:
      jj_consume_token(DERIVATE);
      jj_consume_token(CLASES);
      jj_consume_token(LLAVA);
      Constructor_hijo();
      Cuerpo();
      jj_consume_token(LLAVC);
      break;
    default:
      jj_la1[6] = jj_gen;
      Vacio();
    }
  }

  final public void Constructor() throws ParseException {
    jj_consume_token(CLASES);
    jj_consume_token(PAREA);
    Argumentos();
    jj_consume_token(PAREC);
    jj_consume_token(LLAVA);
    Sentencia();
    jj_consume_token(LLAVC);
  }

  final public void Constructor_hijo() throws ParseException {
    TipoEncapsular();
    jj_consume_token(CLASES);
    jj_consume_token(PAREA);
    Argumentos();
    jj_consume_token(PAREC);
    jj_consume_token(LLAVA);
    Super();
    Sentencia();
    jj_consume_token(LLAVC);
  }

  final public void Cuerpo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case STRING:
    case INT:
    case FLOAT:
    case BOOLEAN:
    case DOUBLE:
      Tipo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        Variables_clase();
        break;
      case FUNC:
        Metodo();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      CuerpoA();
      break;
    case VOID:
      jj_consume_token(VOID);
      MetodosA();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CuerpoA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case PRIVATE:
      TipoEncapsular();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case STRING:
      case INT:
      case FLOAT:
      case BOOLEAN:
      case DOUBLE:
        Tipo();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          Variables_clase();
          break;
        case FUNC:
          Metodo();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        CuerpoA();
        break;
      case VOID:
        jj_consume_token(VOID);
        MetodosA();
        break;
      default:
        jj_la1[10] = jj_gen;
        Vacio();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      Vacio();
    }
  }

  final public void MetodosA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC:
      jj_consume_token(FUNC);
      Metodo_void();
      CuerpoA();
      break;
    case PRINMAIN:
      Principal();
      CuerpoA();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Principal() throws ParseException {
    jj_consume_token(PRINMAIN);
    jj_consume_token(PAREA);
    jj_consume_token(PAREC);
    jj_consume_token(LLAVA);
    Sentencia();
    jj_consume_token(LLAVC);
  }

  final public void Metodo() throws ParseException {
    jj_consume_token(FUNC);
    jj_consume_token(PAREA);
    Argumentos();
    jj_consume_token(PAREC);
    jj_consume_token(LLAVA);
    Sentencia();
    Retorno();
    jj_consume_token(LLAVC);
  }

  final public void Retorno() throws ParseException {
    jj_consume_token(RETURN);
    Tipo_retorno();
  }

  final public void Tipo_retorno() throws ParseException {
    Valor();
    jj_consume_token(PYC);
  }

  final public void Metodo_void() throws ParseException {
    jj_consume_token(PAREA);
    Argumentos();
    jj_consume_token(PAREC);
    jj_consume_token(LLAVA);
    Sentencia();
    jj_consume_token(LLAVC);
  }

  final public void Argumentos() throws ParseException {
    Tipo();
    Declaracion();
    ArgumentosA();
  }

  final public void ArgumentosA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COM:
      jj_consume_token(COM);
      Argumentos();
      break;
    default:
      jj_la1[13] = jj_gen;
      Vacio();
    }
  }

  final public void Variables_clase() throws ParseException {
    Declaracion();
    jj_consume_token(PYC);
    Variables_clase();
  }

  final public void Sentencia() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      jj_consume_token(FOR);
      Sentencia_ciclofor();
      Sentencia();
      break;
    case IF:
      jj_consume_token(IF);
      Sentencia_condicion();
      Sentencia();
      break;
    case CHAR:
    case STRING:
    case INT:
    case FLOAT:
    case BOOLEAN:
    case DOUBLE:
      Tipo();
      Declaracion();
      jj_consume_token(PYC);
      Sentencia();
      break;
    case VAR:
      jj_consume_token(VAR);
      Sentencia_incremental();
      Sentencia();
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
      Sentencia_switch();
      Sentencia();
      break;
    case TRY:
      jj_consume_token(TRY);
      Sentencia_try();
      Sentencia();
      break;
    case THIS:
      jj_consume_token(THIS);
      Sentencia_this();
      Sentencia();
      break;
    case WHILE:
    case DO:
      Sentencia_ciclowhile();
      Sentencia();
      break;
    case FUNC:
      jj_consume_token(FUNC);
      SentenciaLlamarMetodo();
      Sentencia();
      break;
    default:
      jj_la1[14] = jj_gen;
      Vacio();
    }
  }

  final public void Parametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      ParametrosA();
      break;
    case PAREA:
    case ENTERO:
    case FLOTANTEDOUBLE:
      Exp();
      break;
    case CADENA:
      jj_consume_token(CADENA);
      ParametrosA();
      break;
    case CARACTER:
      jj_consume_token(CARACTER);
      ParametrosA();
      break;
    default:
      jj_la1[15] = jj_gen;
      Vacio();
    }
  }

  final public void ParametrosA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COM:
      jj_consume_token(COM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        jj_consume_token(VAR);
        ParametrosA();
        break;
      case PAREA:
      case ENTERO:
      case FLOTANTEDOUBLE:
        Exp();
        break;
      case CADENA:
        jj_consume_token(CADENA);
        ParametrosA();
        break;
      case CARACTER:
        jj_consume_token(CARACTER);
        ParametrosA();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      Vacio();
    }
  }

  final public void SentenciaLlamarMetodo() throws ParseException {
    jj_consume_token(PAREA);
    Parametros();
    jj_consume_token(PAREC);
    jj_consume_token(PYC);
  }

  final public void Sentencia_try() throws ParseException {
    jj_consume_token(LLAVA);
    Sentencia();
    jj_consume_token(LLAVC);
    jj_consume_token(CATCH);
    jj_consume_token(PAREA);
    jj_consume_token(EXCEPT);
    jj_consume_token(VAR);
    jj_consume_token(PAREC);
    jj_consume_token(LLAVA);
    Sentencia();
    jj_consume_token(LLAVC);
  }

  final public void Sentencia_ciclofor() throws ParseException {
    jj_consume_token(PAREA);
    Declaracionfor();
    jj_consume_token(PYC);
    Condg();
    jj_consume_token(PYC);
    Sentencia_incremental();
    jj_consume_token(PAREC);
    jj_consume_token(LLAVA);
    Sentencia();
    jj_consume_token(LLAVC);
  }

  final public void Sentencia_ciclowhile() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(PAREA);
      Condg();
      jj_consume_token(PAREC);
      jj_consume_token(LLAVA);
      Sentencia();
      jj_consume_token(LLAVC);
      break;
    case DO:
      jj_consume_token(DO);
      jj_consume_token(LLAVA);
      Sentencia();
      jj_consume_token(LLAVC);
      jj_consume_token(WHILE);
      jj_consume_token(PAREA);
      Condg();
      jj_consume_token(PAREC);
      jj_consume_token(PYC);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Sentencia_condicion() throws ParseException {
    jj_consume_token(PAREA);
    Condg();
    jj_consume_token(PAREC);
    jj_consume_token(LLAVA);
    Sentencia();
    jj_consume_token(LLAVC);
    Si_e();
  }

  final public void Sentencia_incremental() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCRE:
      jj_consume_token(INCRE);
      jj_consume_token(PYC);
      break;
    case DECRE:
      jj_consume_token(DECRE);
      jj_consume_token(PYC);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Super() throws ParseException {
    jj_consume_token(SUPER);
    jj_consume_token(PAREA);
    Argumentos();
    jj_consume_token(PAREC);
    jj_consume_token(PYC);
  }

  final public void Sentencia_this() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      jj_consume_token(ASIG);
      jj_consume_token(VAR);
      jj_consume_token(PYC);
      Sentencia_this();
      break;
    default:
      jj_la1[20] = jj_gen;
      Vacio();
    }
  }

  final public void Sentencia_switch() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(VAR);
    jj_consume_token(LLAVA);
    Case();
    jj_consume_token(DEF);
    Sentencia();
    jj_consume_token(BREAK);
    jj_consume_token(PYC);
    jj_consume_token(LLAVC);
  }

  final public void Case() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      Caso();
      jj_consume_token(DOSP);
      Sentencia();
      jj_consume_token(BREAK);
      jj_consume_token(PYC);
      Case();
      break;
    default:
      jj_la1[21] = jj_gen;
      Vacio();
    }
  }

  final public void Caso() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAREA:
    case ENTERO:
    case VAR:
      X();
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case CARACTER:
      jj_consume_token(CARACTER);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Si_e() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Si_EA();
      break;
    default:
      jj_la1[23] = jj_gen;
      Vacio();
    }
  }

  final public void Si_EA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLAVA:
      jj_consume_token(LLAVA);
      Sentencia();
      jj_consume_token(LLAVC);
      break;
    case PAREA:
      Sentencia_condicion();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Condg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAREA:
      jj_consume_token(PAREA);
      Condg();
      jj_consume_token(PAREC);
      break;
    case TRUE:
    case FALSE:
    case ENTERO:
    case FLOTANTEDOUBLE:
    case VAR:
      Cond();
      break;
    case NOT:
      jj_consume_token(NOT);
      Condg();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    CondgA();
  }

  final public void CondgA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      Condg();
      CondgA();
      break;
    case OR:
      jj_consume_token(OR);
      Condg();
      CondgA();
      break;
    case NOT:
      jj_consume_token(NOT);
      Condg();
      CondgA();
      break;
    default:
      jj_la1[26] = jj_gen;
      Vacio();
    }
  }

  final public void Cond() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAREA:
    case ENTERO:
    case FLOTANTEDOUBLE:
    case VAR:
      Exp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYORQ:
        jj_consume_token(MAYORQ);
        break;
      case MENORQ:
        jj_consume_token(MENORQ);
        break;
      case MAYORI:
        jj_consume_token(MAYORI);
        break;
      case MENORI:
        jj_consume_token(MENORI);
        break;
      case IGUALI:
        jj_consume_token(IGUALI);
        break;
      case DIFER:
        jj_consume_token(DIFER);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Exp();
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAREA:
      jj_consume_token(PAREA);
      Exp();
      jj_consume_token(PAREC);
      ExpA();
      break;
    case VAR:
      jj_consume_token(VAR);
      ExpA();
      break;
    case ENTERO:
      jj_consume_token(ENTERO);
      ExpA();
      break;
    case FLOTANTEDOUBLE:
      jj_consume_token(FLOTANTEDOUBLE);
      ExpA();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      Exp();
      break;
    case RESTA:
      jj_consume_token(RESTA);
      Exp();
      break;
    case DIVIS:
      jj_consume_token(DIVIS);
      Exp();
      break;
    case POTEN:
      jj_consume_token(POTEN);
      Exp();
      break;
    case MODUL:
      jj_consume_token(MODUL);
      Exp();
      break;
    default:
      jj_la1[30] = jj_gen;
      Parametros();
    }
  }

  final public void Declaracion() throws ParseException {
    jj_consume_token(VAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case TRUE:
      case FALSE:
      case ENTERO:
      case FLOTANTEDOUBLE:
      case CADENA:
      case VAR:
        Valor();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUMA:
          case RESTA:
          case DIVIS:
          case POTEN:
          case MODUL:
          case MULTI:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_1;
          }
          Oper();
          Valor();
        }
        break;
      case PAREA:
        jj_consume_token(PAREA);
        Valor();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUMA:
          case RESTA:
          case DIVIS:
          case POTEN:
          case MODUL:
          case MULTI:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_2;
          }
          Oper();
          Valor();
        }
        jj_consume_token(PAREC);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      Vacio();
    }
  }

  final public void Arreglo() throws ParseException {
    jj_consume_token(CORA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    case VAR:
      jj_consume_token(VAR);
      break;
    case CARACTER:
      jj_consume_token(CARACTER);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CORC);
  }

  final public void Valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    case FLOTANTEDOUBLE:
      jj_consume_token(FLOTANTEDOUBLE);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case VAR:
      jj_consume_token(VAR);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Oper() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    case DIVIS:
      jj_consume_token(DIVIS);
      break;
    case POTEN:
      jj_consume_token(POTEN);
      break;
    case MODUL:
      jj_consume_token(MODUL);
      break;
    case MULTI:
      jj_consume_token(MULTI);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Z() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case VAR:
      jj_consume_token(VAR);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void X() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
      X1();
      break;
    case VAR:
      jj_consume_token(VAR);
      X1();
      break;
    case PAREA:
      jj_consume_token(PAREA);
      X();
      jj_consume_token(PAREC);
      X1();
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void X1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      X();
      X1();
      break;
    case RESTA:
      jj_consume_token(RESTA);
      X();
      X1();
      break;
    case DIVIS:
      jj_consume_token(DIVIS);
      X();
      X1();
      break;
    case POTEN:
      jj_consume_token(POTEN);
      X();
      X1();
      break;
    case MODUL:
      jj_consume_token(MODUL);
      X();
      X1();
      break;
    default:
      jj_la1[40] = jj_gen;
      Vacio();
    }
  }

  final public void Y() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOTANTEDOUBLE:
      jj_consume_token(FLOTANTEDOUBLE);
      Y1();
      break;
    case VAR:
      jj_consume_token(VAR);
      Y1();
      break;
    case PAREA:
      jj_consume_token(PAREA);
      Y();
      jj_consume_token(PAREC);
      Y1();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Y1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      Y();
      Y1();
      break;
    case RESTA:
      jj_consume_token(RESTA);
      Y();
      Y1();
      break;
    case DIVIS:
      jj_consume_token(DIVIS);
      Y();
      Y1();
      break;
    case POTEN:
      jj_consume_token(POTEN);
      Y();
      Y1();
      break;
    case MODUL:
      jj_consume_token(MODUL);
      Y();
      Y1();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Declaracionfor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      jj_consume_token(VAR);
      jj_consume_token(ASIG);
      X();
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      jj_consume_token(VAR);
      jj_consume_token(ASIG);
      Y();
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      jj_consume_token(VAR);
      jj_consume_token(ASIG);
      Y();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x7c00000,0xc0000,0x7c00000,0xc0000,0x80000000,0x0,0x7c00000,0x0,0x7c00000,0xc0000,0x0,0x0,0x4fe05000,0x0,0x0,0x0,0x204000,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x10,0x800,0x0,0x804,0x0,0x4000,0x0,0x804,0x0,0x804,0x0,0x400,0x400000,0x980,0x40000,0x40000,0x400000,0x0,0x0,0x0,0x200,0x40000,0x0,0x44000,0x40060,0x0,0xfc000000,0x40060,0x40000,0x0,0x0,0x0,0x40060,0x0,0x0,0x60,0x0,0x60,0x40000,0x0,0x40000,0x0,0x800,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x18000000,0x0,0x18000000,0x0,0x0,0x10000000,0x0,0x18000000,0xb600000,0xb600000,0x0,0x0,0x18,0x8000000,0x0,0xb200000,0x0,0x0,0x8600004,0x7,0x0,0x8600000,0x8600000,0xf800,0x1f800,0x1f800,0xa600000,0x20,0x9200000,0xa600000,0x1f800,0x8000000,0x8200000,0xf800,0x8400000,0xf800,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[101];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 101; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
